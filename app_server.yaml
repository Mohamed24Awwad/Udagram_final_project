Description:
  Mohamed Awwad >> Final Project Advanced Cloud Track

  A CFN Script to deploy the load balanced, Auto scaling web application for the Udargam project.

Parameters:
  # Parameters are optional but will make your CloudFormation templates more reusable.
  # Use them for things that may change over time, such as server AMI, instance type and so on.

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    Default: Udagramproject

  WebServerAMI:
    Description: The machine image to be used for web servers.
    Type: String
    Default: ami-03190fe20ef6b1419 
  
  WebServerInstanceType:
    Description: The web server EC2 instance type to be used. 
    Type: String
    Default: t3.medium

Resources:

  # ------------------- IAM settings -------------------- # 
  # Instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers.
  # Never give too much permissions to your EC2 instances! If they get hacked, the permissions get hacked also!
  # For our web application we create a Role called UdacityS3ReadOnlyEC2 and just give it a policy of S3 Read-Only Access.
  UdacityS3ReadOnlyEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2

  # ------------------- Security groups for load balancer and web servers -------------------- # 
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to the load balancer.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 # allow all to access http 80 port 
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 # allow 80 port to send outbound traffic

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to web servers and SSH from the bastion host only.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup # allow only load balancer instances to access http 80 port 
      # For the troubleshooting open 22 port and use bastion hosts' IP address to SSH into web servers 
      #- IpProtocol: tcp
      #  FromPort: 22
      #  ToPort: 22
      #  CidrIp: 
      #    Fn::ImportValue:
      #      !Sub ${EnvironmentName}-BASTION-HOST-1-CIDR
      #- IpProtocol: tcp
      #  FromPort: 22
      #  ToPort: 22
      #  CidrIp: 
      #    Fn::ImportValue:
      #      !Sub ${EnvironmentName}-BASTION-HOST-2-CIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0 # allow all ports to send outbound traffic
  
  # ------------------- Auto scaling settings -------------------- # 
  WebAppLB: # defines LB's location and security group
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups: 
        - !Ref LBSecGroup

  WebAppTargetGroup: # defines LB's health check rules
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
    DependsOn:
      - WebAppLB

  Listener: # defines which port observes traffic from outside internet
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP
    DependsOn:
      - WebAppLB
      - WebAppTargetGroup

  ALBListenerRule: # defines where to forward the traffic from Listener.
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  WebAppGroup: # defines how many web servers to launch in which subnets
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs: 
        - !Ref WebAppTargetGroup

  # ------------------- Web servers launch configurations -------------------- # 
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData: # define services we would like to install and run in EC2 instances upon launching.
        Fn::Base64: !Sub |
            #!/bin/bash
             apt-get update -y
             apt-get install apache2 -y
             systemctl start apache2.service
             sudo service httpd start 
             cd /var/www/html
             echo "Hi it works perfectly !!" > index.html
      ImageId: !Ref WebServerAMI
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups: 
        - !Ref WebServerSecGroup
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

Outputs:
# Outputs are optional.
# For our web application we export the LB's URL.
# This makes it easier to just click on the link and verify that our web app is up and running!

  WebAppLB:
    Description: The public URL of web application. 
    Value: 
      !Join
        - ''
        - - 'http://'
          - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-WEB-APP-URL